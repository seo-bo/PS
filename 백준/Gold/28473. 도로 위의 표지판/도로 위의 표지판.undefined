#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
typedef tuple<ll, ll, ll, ll>tp;

int main(void)
{
	cin.tie(0)->sync_with_stdio(0);
	int n = 0, m = 0;
	cin >> n >> m;
	vector<tp>v(m);
	for (auto& [a, b, c, d] : v)
	{
		cin >> c >> d >> a >> b;
	}
	sort(v.begin(), v.end());
	vector<int>parent(n + 1), rank(n + 1);
	iota(parent.begin(), parent.end(), 0);
	function<int(int)>find = [&](int root)
		{
			return (parent[root] == root) ? parent[root] : parent[root] = find(parent[root]);
		};
	auto merge = [&](int a, int b)
		{
			int r1 = find(a), r2 = find(b);
			if (rank[r1] > rank[r2])
			{
				parent[r2] = r1;
			}
			else
			{
				parent[r1] = r2;
				if (rank[r1] == rank[r2])
				{
					rank[r2]++;
				}
			}
		};
	ll ans = 0, cnt = 0;
	string res;
	for (int i = 0; i < m && cnt < n - 1; ++i)
	{
		auto [a, b, c, d] = v[i];
		if (find(c) != find(d))
		{
			res += char(a + '0');
			merge(c, d);
			ans += b;
			cnt++;
		}
	}
	if (cnt != n - 1)
	{
		cout << -1;
		return 0;
	}
	cout << res << ' ' << ans;
	return 0;
}