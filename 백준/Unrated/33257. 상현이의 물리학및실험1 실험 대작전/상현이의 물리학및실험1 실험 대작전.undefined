#include <bits/stdc++.h>
#include <unordered_set>
using namespace std;
typedef long long ll;

int main(void)
{
	cin.tie(0)->sync_with_stdio(0);
	ll n = 0, e = 0;
	cin >> n >> e;
	vector<ll>v(n);
	vector<int>parent(n + 1, 0), rank(n + 1, 0);
	iota(parent.begin(), parent.end(), 0);
	function<int(int)> find = [&](int root)
		{
			return (parent[root] == root) ? parent[root] : parent[root] = find(parent[root]);
		};
	auto merge = [&](int a, int b)
		{
			int r1 = find(a), r2 = find(b);
			if (r1 != r2)
			{
				if (rank[r1] > rank[r2])
				{
					parent[r2] = r1;
				}
				else
				{
					parent[r1] = r2;
					if (rank[r1] == rank[r2])
					{
						rank[r2]++;
					}
				}
			}
		};
	for (auto& i : v)
	{
		cin >> i;
	}
	sort(v.begin(), v.end());
	for (int i = 1; i < n; ++i)
	{
		if (llabs(v[i] - v[i - 1]) < e)
		{
			if (find(i) != find(i - 1))
			{
				merge(i, i - 1);
			}
		}
	}
	unordered_set<int>ss;
	for (int i = 0; i < n; ++i)
	{
		ss.insert(find(i));
	}
	cout << ss.size();
	return 0;
}