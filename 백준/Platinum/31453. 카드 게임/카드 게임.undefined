#include <bits/stdc++.h>
using namespace std;
typedef long long ll;
int main(void)
{
	cin.tie(0)->sync_with_stdio(0);
	int T = 0;
	cin >> T;
	while (T--)
	{
		int n = 0, m = 0;
		cin >> n >> m;
		vector<int>x(n), y;
		for (auto& i : x)
		{
			cin >> i;
		}
		for (int i = -n; i <= n; ++i)
		{
			if (!i)
			{
				continue;
			}
			bool flag = true;
			for (auto& j : x)
			{
				if (i == j)
				{
					flag = false;
					break;
				}
			}
			if (flag)
			{
				y.push_back(i);
			}
		}
		vector<vector<ll>>dp(1LL << n, vector<ll>(m + 1, -1));
		function<ll(int, int, int)> dfs = [&](int mask, int sum, int depth)
			{
				if (depth == n)
				{
					return (sum == m) ? 1LL : 0LL;
				}
				if (dp[mask][sum] != -1)
				{
					return dp[mask][sum];
				}
				ll res = 0;
				for (int i = 0; i < n; ++i)
				{
					if (!(mask & (1 << i)))
					{
						int a = x[depth], b = y[i], cnt = 0;
						bool flag = false;
						if (a > 0 && b > 0 || a < 0 && b < 0)
						{
							flag = true;
						}
						if (flag)
						{
							if (abs(a) > abs(b))
							{
								cnt++;
							}
						}
						else
						{
							cnt++;
						}
						if (sum + cnt > m)
						{
							continue;
						}
						res += dfs(mask | (1 << i), sum + cnt, depth + 1);
					}
				}
				return dp[mask][sum] = res;
			};
		cout << dfs(0, 0, 0) << '\n';
	}
	return 0;
}